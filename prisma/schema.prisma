// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // WAHA Gateway specific models
    wahaSessions      WahaSession[]
    messageTemplates  MessageTemplate[]
    contactLists      ContactList[]
    mediaLibraryItems MediaLibraryItem[]
    campaigns         Campaign[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// WAHA Gateway specific models

model WahaSession {
    id          String   @id @default(cuid())
    userId      String
    sessionName String   // Unique per user enforced at application level or via @@unique([userId, sessionName])
    status      String   // Consider Enum: "Starting", "Running", "Stopped", "Error"
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, sessionName]) // Ensure session names are unique per user
    @@index([userId])
}

model MessageTemplate {
    id          String   @id @default(cuid())
    userId      String
    name        String
    textContent String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    campaigns Campaign[] // Relation to campaigns using this template

    @@index([userId])
}

model ContactList {
    id           String   @id @default(cuid())
    userId       String
    name         String
    contactCount Int      @default(0)
    createdAt    DateTime @default(now())

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    contacts Contact[] // Relation to contacts in this list
    campaigns Campaign[] // Relation to campaigns using this list

    @@index([userId])
}

model Contact {
    id            String  @id @default(cuid())
    contactListId String
    phoneNumber   String
    firstName     String?

    contactList ContactList @relation(fields: [contactListId], references: [id], onDelete: Cascade)

    @@index([contactListId])
    @@index([phoneNumber]) // Index for searching contacts by phone number
    // Consider @@unique([contactListId, phoneNumber]) if phone numbers must be unique within a list
}

model MediaLibraryItem {
    id          String   @id @default(cuid())
    userId      String
    filename    String
    storagePath String   @unique // Path in storage (e.g., S3 key, local path)
    mimeType    String
    createdAt   DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    campaigns Campaign[] // Relation to campaigns using this media item

    @@index([userId])
}

model Campaign {
    id                        String   @id @default(cuid())
    userId                    String
    name                      String
    contactListId             String
    messageTemplateId         String
    mediaLibraryItemId        String?  // Optional media attachment
    defaultNameValue          String   // Default value if contact's firstName is null
    scheduledAt               DateTime // When the campaign is scheduled to start
    status                    String   // e.g., "Draft", "Scheduled", "Running", "Paused", "Completed", "Failed"
    totalContacts             Int      // Snapshot of total contacts when started
    sentCount                 Int      @default(0)
    failedCount               Int      @default(0)
    lastProcessedContactIndex Int?     // For resuming paused campaigns
    createdAt                 DateTime @default(now())
    startedAt                 DateTime? // When the campaign actually started running
    completedAt               DateTime? // When the campaign finished or failed completely

    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    contactList      ContactList       @relation(fields: [contactListId], references: [id], onDelete: Restrict) // Prevent deleting list if used in campaign? Or Cascade?
    messageTemplate  MessageTemplate   @relation(fields: [messageTemplateId], references: [id], onDelete: Restrict) // Prevent deleting template if used
    mediaLibraryItem MediaLibraryItem? @relation(fields: [mediaLibraryItemId], references: [id], onDelete: SetNull) // Allow deleting media, just remove link

    @@index([userId])
    @@index([status])
    @@index([scheduledAt])
}
